import{_ as i,c as t,o as a,ag as s}from"./chunks/framework.S-Qvb3wi.js";const p=JSON.parse('{"title":"Rate Limiting","description":"","frontmatter":{},"headers":[],"relativePath":"api/rate-limiting.md","filePath":"api/rate-limiting.md"}'),n={name:"api/rate-limiting.md"};function o(r,e,l,d,h,c){return a(),t("div",null,e[0]||(e[0]=[s(`<h1 id="rate-limiting" tabindex="-1">Rate Limiting <a class="header-anchor" href="#rate-limiting" aria-label="Permalink to &quot;Rate Limiting&quot;">​</a></h1><p>The API implements rate limiting as a security measure to protect your instance from denial-of-service (DoS) and brute-force attacks. This is a crucial feature for maintaining the security and stability of the application.</p><h2 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h2><p>The rate limiter restricts the number of requests an IP address can make within a specific time frame. These limits are configurable via environment variables to suit your security needs.</p><p>By default, the limits are:</p><ul><li><strong>100 requests</strong> per <strong>1 minute</strong> per IP address.</li></ul><p>If this limit is exceeded, the API will respond with an HTTP <code>429 Too Many Requests</code> status code.</p><h3 id="response-body" tabindex="-1">Response Body <a class="header-anchor" href="#response-body" aria-label="Permalink to &quot;Response Body&quot;">​</a></h3><p>When an IP address is rate-limited, the API will return a JSON response with the following format:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">429</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Too many requests from this IP, please try again after 15 minutes&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><p>You can customize the rate-limiting settings by setting the following environment variables in your <code>.env</code> file:</p><ul><li><code>RATE_LIMIT_WINDOW_MS</code>: The time window in milliseconds. Defaults to <code>60000</code> (1 minute).</li><li><code>RATE_LIMIT_MAX_REQUESTS</code>: The maximum number of requests allowed per IP address within the time window. Defaults to <code>100</code>.</li></ul><h2 id="handling-rate-limits" tabindex="-1">Handling Rate Limits <a class="header-anchor" href="#handling-rate-limits" aria-label="Permalink to &quot;Handling Rate Limits&quot;">​</a></h2><p>If you are developing a client that interacts with the API, you should handle rate limiting gracefully:</p><ol><li><strong>Check the Status Code</strong>: Monitor for a <code>429</code> HTTP status code in responses.</li><li><strong>Implement a Retry Mechanism</strong>: When you receive a <code>429</code> response, it is best practice to wait before retrying the request. Implementing an exponential backoff strategy is recommended.</li><li><strong>Check Headers</strong>: The response will include the following standard headers to help you manage your request rate: <ul><li><code>RateLimit-Limit</code>: The maximum number of requests allowed in the current window.</li><li><code>RateLimit-Remaining</code>: The number of requests you have left in the current window.</li><li><code>RateLimit-Reset</code>: The time when the rate limit window will reset, in UTC epoch seconds.</li></ul></li></ol><h2 id="excluded-endpoints" tabindex="-1">Excluded Endpoints <a class="header-anchor" href="#excluded-endpoints" aria-label="Permalink to &quot;Excluded Endpoints&quot;">​</a></h2><p>Certain essential endpoints are excluded from rate limiting to ensure the application&#39;s UI remains responsive. These are:</p><ul><li><code>/auth/status</code></li><li><code>/settings/system</code></li></ul><p>These endpoints can be called as needed without affecting your rate limit count.</p>`,20)]))}const m=i(n,[["render",o]]);export{p as __pageData,m as default};
